locals {
  name_prefix = var.name_prefix
  
  common_tags = {
    Project     = "aurora-log-system"
    Environment = var.environment
    ManagedBy   = "terraform"
    CostCenter  = var.cost_center
    CreatedAt   = timestamp()
  }

  # DynamoDB table names
  dynamodb_tables = {
    instance_metadata = "${var.name_prefix}-aurora-instance-metadata"
    tracking         = "${var.name_prefix}-aurora-log-file-tracking"
    jobs            = "${var.name_prefix}-aurora-log-processing-jobs"
  }

  # S3 bucket names (must be globally unique)
  s3_buckets = {
    aurora_logs = "${var.name_prefix}-aurora-logs-${data.aws_caller_identity.current.account_id}"
    k8s_logs    = "${var.name_prefix}-k8s-logs-${data.aws_caller_identity.current.account_id}"
  }
}

# Data sources
data "aws_caller_identity" "current" {}
data "aws_availability_zones" "available" {
  state = "available"
}

# Random passwords for sensitive resources
resource "random_password" "rds_password" {
  length  = 32
  special = true
  override_special = "!#$%&*()-_=+[]{}<>:?"
}

resource "random_password" "valkey_auth_token" {
  length  = 32
  special = false  # Valkey auth tokens don't support special characters
}

# VPC Module
module "vpc" {
  source = "./modules/vpc"

  name_prefix        = var.name_prefix
  vpc_cidr          = var.vpc_cidr
  availability_zones = slice(data.aws_availability_zones.available.names, 0, var.az_count)
  environment       = var.environment
  
  # Subnet configuration
  public_subnet_cidrs    = var.public_subnet_cidrs
  private_subnet_cidrs   = var.private_subnet_cidrs
  database_subnet_cidrs  = var.database_subnet_cidrs
  
  enable_nat_gateway     = true
  single_nat_gateway     = var.environment == "poc" ? true : false
  enable_dns_hostnames   = true
  enable_dns_support     = true
  
  tags = local.common_tags
}

# IAM Module
module "iam" {
  source = "./modules/iam"

  name_prefix      = var.name_prefix
  environment      = var.environment
  s3_bucket_names  = local.s3_buckets
  dynamodb_tables  = local.dynamodb_tables
  account_id       = data.aws_caller_identity.current.account_id
  region          = var.region
  
  tags = local.common_tags
}

# S3 Module
module "s3" {
  source = "./modules/s3"
  
  bucket_names = local.s3_buckets
  environment  = var.environment
  log_retention_days = var.environment == "production" ? 365 : 30
  
  tags = local.common_tags
}

# DynamoDB Module
module "dynamodb" {
  source = "./modules/dynamodb"

  table_names = local.dynamodb_tables
  environment = var.environment
  
  tags = local.common_tags
}

# RDS Aurora Module
module "rds" {
  source = "./modules/rds"
  
  name_prefix            = var.name_prefix
  environment            = var.environment
  vpc_id                 = module.vpc.vpc_id
  private_subnet_ids     = module.vpc.database_subnet_ids
  eks_security_group_ids = [module.eks.node_security_group_id]
  availability_zones     = slice(data.aws_availability_zones.available.names, 0, var.az_count)
  
  cluster_config = {
    cluster_identifier = "${var.name_prefix}-aurora-cluster"
    engine_version     = "8.0.mysql_aurora.3.07.1"
    instance_class     = var.environment == "production" ? "db.r6g.large" : "db.t4g.medium"
    instance_count     = var.environment == "production" ? 2 : 1
    database_name      = "aurora_logs"
    master_username    = "admin"
    master_password    = random_password.rds_password.result
  }
  
  tags = local.common_tags
}

# ElastiCache Valkey Module
module "elasticache" {
  source = "./modules/elasticache"
  
  name_prefix            = var.name_prefix
  environment            = var.environment
  vpc_id                 = module.vpc.vpc_id
  private_subnet_ids     = module.vpc.database_subnet_ids
  eks_security_group_ids = [module.eks.node_security_group_id]
  
  cache_config = {
    cluster_id      = "${var.name_prefix}-valkey"
    engine_version  = "8.0"
    node_type       = var.environment == "production" ? "cache.r7g.large" : "cache.t4g.micro"
    num_cache_nodes = var.environment == "production" ? 2 : 1
    auth_token      = var.environment == "production" ? random_password.valkey_auth_token.result : ""
  }
  
  tags = local.common_tags
}

# EKS Module
module "eks" {
  source = "./modules/eks"
  
  cluster_name       = var.name_prefix
  environment        = var.environment
  kubernetes_version = "1.31"
  vpc_id            = module.vpc.vpc_id
  subnet_ids        = module.vpc.private_subnet_ids
  node_subnet_ids   = module.vpc.private_subnet_ids
  
  cluster_role_arn = module.iam.eks_cluster_role_arn
  node_role_arn    = module.iam.eks_node_role_arn
  
  endpoint_public_access = var.environment == "poc" ? true : false
  public_access_cidrs   = var.environment == "poc" ? ["0.0.0.0/0"] : var.allowed_cidr_blocks
  
  node_group_config = {
    desired_size             = var.environment == "production" ? 3 : 2
    max_size                = var.environment == "production" ? 10 : 5
    min_size                = var.environment == "production" ? 3 : 1
    instance_types          = var.environment == "production" ? ["t4g.large"] : ["t4g.medium"]
    capacity_type           = var.environment == "production" ? "ON_DEMAND" : "SPOT"
    disk_size               = 100
    ami_type                = "AL2023_ARM_64_STANDARD"
    enable_remote_access    = false
    ec2_ssh_key            = ""
    source_security_group_ids = []
  }
  
  enable_container_insights = var.environment == "production" ? true : false
  
  tags = local.common_tags
}

# ECR Module
module "ecr" {
  source = "./modules/ecr"
  
  repository_name = "${var.name_prefix}-aurora-log-system"
  environment     = var.environment
  
  push_principal_arns = [module.iam.jenkins_ecr_user_arn]
  pull_principal_arns = [module.iam.eks_node_role_arn]
  
  additional_repositories = [
    "${var.name_prefix}-discovery",
    "${var.name_prefix}-processor"
  ]
  
  tags = local.common_tags
}