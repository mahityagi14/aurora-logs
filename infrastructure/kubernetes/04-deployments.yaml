---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: discovery
  namespace: aurora-logs
spec:
  replicas: 1  # Multiple instances for HA  # POC: 1; Production: 5-10 with sharding
  selector:
    matchLabels:
      app: discovery
  template:
    metadata:
      labels:
        app: discovery
    spec:
      serviceAccountName: discovery-sa
      nodeSelector:
        kubernetes.io/hostname: ip-172-16-30-241.ec2.internal  # aurora-node-2
      # hostNetwork: false for cluster DNS resolution
      dnsPolicy: ClusterFirst
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - discovery
              topologyKey: kubernetes.io/hostname
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: discovery
        image: 072006186126.dkr.ecr.us-east-1.amazonaws.com/aurora-log-system:discovery-latest
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        # Pod Identity handles AWS credentials automatically
        ports:
        - name: metrics
          containerPort: 9090
          protocol: TCP
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "250m"
            memory: "512Mi"
        # Health checks disabled temporarily
        # livenessProbe:
        #   httpGet:
        #     path: /healthz
        #     port: metrics
        #   initialDelaySeconds: 30
        #   periodSeconds: 30
        #   timeoutSeconds: 5
        #   failureThreshold: 3
        # readinessProbe:
        #   httpGet:
        #     path: /readyz
        #     port: metrics
        #   initialDelaySeconds: 10
        #   periodSeconds: 10
        #   timeoutSeconds: 5
        #   failureThreshold: 3
        volumeMounts:
        - name: tmp
          mountPath: /tmp
          readOnly: false
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: processor
  namespace: aurora-logs
spec:
  replicas: 1  # Multiple instances for HA and throughput
  selector:
    matchLabels:
      app: processor
  template:
    metadata:
      labels:
        app: processor
    spec:
      serviceAccountName: processor-sa
      nodeSelector:
        kubernetes.io/hostname: ip-172-16-30-241.ec2.internal  # aurora-node-2
      # hostNetwork: false for cluster DNS resolution
      dnsPolicy: ClusterFirst
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: processor
        image: 072006186126.dkr.ecr.us-east-1.amazonaws.com/aurora-log-system:processor-latest
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        # Pod Identity handles AWS credentials automatically
        - name: OPENOBSERVE_USER
          valueFrom:
            secretKeyRef:
              name: openobserve-credentials
              key: admin-email
        - name: OPENOBSERVE_PASS
          valueFrom:
            secretKeyRef:
              name: openobserve-credentials
              key: admin-password
        ports:
        - name: metrics
          containerPort: 9090
          protocol: TCP
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
        # Health checks disabled temporarily
        # livenessProbe:
        #   httpGet:
        #     path: /healthz
        #     port: metrics
        #   initialDelaySeconds: 30
        #   periodSeconds: 30
        #   timeoutSeconds: 5
        #   failureThreshold: 3
        # readinessProbe:
        #   httpGet:
        #     path: /readyz
        #     port: metrics
        #   initialDelaySeconds: 10
        #   periodSeconds: 10
        #   timeoutSeconds: 5
        #   failureThreshold: 3
        volumeMounts:
        - name: tmp
          mountPath: /tmp
          readOnly: false
        - name: cache
          mountPath: /cache
          readOnly: false
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: cache
        emptyDir:
          sizeLimit: 5Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: aurora-logs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      serviceAccountName: kafka-sa
      nodeSelector:
        kubernetes.io/hostname: ip-172-16-30-241.ec2.internal  # aurora-node-2
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:8.0.0.arm64
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9092
          name: broker
        - containerPort: 9093
          name: controller
        env:
        # KRaft mode configuration
        - name: CLUSTER_ID
          value: "MkU3OEVBNzE2Q0IyNDczNg"
        - name: KAFKA_NODE_ID
          value: "1"
        - name: KAFKA_PROCESS_ROLES
          value: "broker,controller"
        - name: KAFKA_CONTROLLER_QUORUM_VOTERS
          value: "1@localhost:9093"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka-service.aurora-logs.svc.cluster.local:9092"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
        - name: KAFKA_CONTROLLER_LISTENER_NAMES
          value: "CONTROLLER"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "PLAINTEXT"
        - name: KAFKA_LOG_DIRS
          value: "/var/lib/kafka/data"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
          value: "1"
        - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
          value: "0"
        - name: KAFKA_LOG_RETENTION_HOURS
          value: "168"
        - name: KAFKA_LOG_SEGMENT_BYTES
          value: "1073741824"
        # JVM Settings
        - name: KAFKA_HEAP_OPTS
          value: "-Xmx2G -Xms2G"
        - name: KAFKA_JVM_PERFORMANCE_OPTS
          value: "-XX:+UseG1GC -XX:MaxGCPauseMillis=20"
        resources:
          requests:
            cpu: "500m"
            memory: "2Gi"
          limits:
            cpu: "1000m"
            memory: "4Gi"
        volumeMounts:
        - name: kafka-data
          mountPath: /var/lib/kafka
        command:
        - sh
        - -c
        - |
          mkdir -p /var/lib/kafka/data
          # Create server.properties
          cat > /tmp/server.properties <<EOF
          node.id=${KAFKA_NODE_ID}
          process.roles=${KAFKA_PROCESS_ROLES}
          controller.quorum.voters=${KAFKA_CONTROLLER_QUORUM_VOTERS}
          listeners=${KAFKA_LISTENERS}
          advertised.listeners=${KAFKA_ADVERTISED_LISTENERS}
          listener.security.protocol.map=${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
          controller.listener.names=${KAFKA_CONTROLLER_LISTENER_NAMES}
          inter.broker.listener.name=${KAFKA_INTER_BROKER_LISTENER_NAME}
          log.dirs=${KAFKA_LOG_DIRS}
          auto.create.topics.enable=${KAFKA_AUTO_CREATE_TOPICS_ENABLE}
          offsets.topic.replication.factor=${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
          transaction.state.log.replication.factor=${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
          transaction.state.log.min.isr=${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
          num.partitions=10
          default.replication.factor=1
          log.retention.hours=168
          log.segment.bytes=1073741824
          EOF
          
          # Format storage if needed
          if [ ! -f /var/lib/kafka/data/meta.properties ]; then
            kafka-storage format -t ${CLUSTER_ID} -c /tmp/server.properties
          fi
          
          # Start Kafka
          exec kafka-server-start /tmp/server.properties
      volumes:
      - name: kafka-data
        persistentVolumeClaim:
          claimName: kafka-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: aurora-logs
spec:
  ports:
  - name: broker
    port: 9092
    targetPort: 9092
  - name: controller
    port: 9093
    targetPort: 9093
  selector:
    app: kafka
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openobserve
  namespace: aurora-logs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: openobserve
  template:
    metadata:
      labels:
        app: openobserve
    spec:
      serviceAccountName: openobserve-sa
      nodeSelector:
        kubernetes.io/hostname: ip-172-16-30-241.ec2.internal  # aurora-node-2
      containers:
      - name: openobserve
        image: openobserve/openobserve:v0.15.0-rc4
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5080
          name: http
        env:
        # OpenObserve Configuration
        - name: ZO_DATA_DIR
          value: "/data"
        - name: ZO_HTTP_PORT
          value: "5080"
        - name: ZO_ROOT_USER_EMAIL
          value: "admin@example.com"
        - name: ZO_ROOT_USER_PASSWORD
          value: "Complexpass#123"
        - name: ZO_S3_BUCKET_NAME
          value: "company-aurora-logs-poc"
        - name: ZO_S3_REGION_NAME
          value: "us-east-1"
        - name: ZO_S3_SERVER_URL
          value: "https://s3.us-east-1.amazonaws.com"
        - name: ZO_STORAGE_TYPE
          value: "s3"
        - name: AWS_REGION
          value: "us-east-1"
        - name: AWS_DEFAULT_REGION
          value: "us-east-1"
        # Performance settings
        - name: ZO_MEMORY_CACHE_ENABLED
          value: "true"
        - name: ZO_MEMORY_CACHE_CACHE_LATEST_FILES
          value: "true"
        - name: ZO_MEMORY_CACHE_MAX_SIZE
          value: "2048"
        - name: ZO_PAYLOAD_LIMIT
          value: "209715200"
        - name: ZO_MAX_FILE_SIZE_ON_DISK
          value: "128"
        - name: ZO_FILE_PUSH_INTERVAL
          value: "60"
        - name: ZO_COMPACT_ENABLED
          value: "true"
        - name: ZO_COMPACT_INTERVAL
          value: "3600"
        # Auth settings
        - name: ZO_AUTH_COOKIE_SECURE
          value: "false"
        - name: ZO_COOKIE_SAME_SITE_LAX
          value: "true"
        # Features
        - name: ZO_UI_ENABLED
          value: "true"
        - name: ZO_METRICS_DEDUP_ENABLED
          value: "true"
        - name: ZO_PROMETHEUS_ENABLED
          value: "true"
        resources:
          requests:
            cpu: "1000m"
            memory: "4Gi"
          limits:
            cpu: "2000m"
            memory: "8Gi"
        volumeMounts:
        - name: data
          mountPath: /data
        livenessProbe:
          httpGet:
            path: /healthz
            port: 5080
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /healthz
            port: 5080
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: openobserve-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: openobserve-service
  namespace: aurora-logs
spec:
  ports:
  - name: http
    port: 5080
    targetPort: 5080
  selector:
    app: openobserve
  type: ClusterIP