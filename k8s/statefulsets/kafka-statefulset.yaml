apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: aurora-logs
spec:
  serviceName: kafka-service
  replicas: 3
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      serviceAccountName: kafka-sa
      nodeSelector:
        kubernetes.io/arch: arm64
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - kafka
            topologyKey: kubernetes.io/hostname
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: kafka
        image: 072006186126.dkr.ecr.us-east-1.amazonaws.com/aurora-log-system:kafka-latest
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        env:
        - name: KAFKA_BROKER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['spec.pod.beta.kubernetes.io/statefulset-index']
        - name: KAFKA_HEAP_OPTS
          value: "-Xms1G -Xmx1G"
        - name: KAFKA_NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['spec.pod.beta.kubernetes.io/statefulset-index']
        - name: KAFKA_CONTROLLER_QUORUM_VOTERS
          value: "0@kafka-0.kafka-service.aurora-logs.svc.cluster.local:9093,1@kafka-1.kafka-service.aurora-logs.svc.cluster.local:9093,2@kafka-2.kafka-service.aurora-logs.svc.cluster.local:9093"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://$(POD_NAME).kafka-service.aurora-logs.svc.cluster.local:9092"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: broker
          containerPort: 9092
          protocol: TCP
        - name: controller
          containerPort: 9093
          protocol: TCP
        - name: jmx
          containerPort: 9999
          protocol: TCP
        resources:
          requests:
            cpu: "1"
            memory: "2Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
        livenessProbe:
          tcpSocket:
            port: broker
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              kafka-metadata-shell.sh --snapshot /var/kafka-logs/__cluster_metadata-0/00000000000000000000.log --print-brokers | grep -q "BrokerId: ${KAFKA_BROKER_ID}"
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
        volumeMounts:
        - name: kafka-data
          mountPath: /var/kafka-logs
        - name: kafka-config
          mountPath: /opt/kafka/config/kraft
      volumes:
      - name: kafka-config
        configMap:
          name: kafka-config
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: gp3
      resources:
        requests:
          storage: 100Gi