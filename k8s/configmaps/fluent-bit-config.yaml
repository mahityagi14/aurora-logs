apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: fluent-bit
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush         5
        Log_Level     info
        Daemon        Off
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020
        Storage.Path  /var/fluent-bit/state
        Storage.Sync  Normal
        Storage.Metrics On
        Storage.Backlog.Mem_Limit 5M

    [INPUT]
        Name              tail
        Tag               kube.*
        Path              /var/log/containers/*.log
        Multiline.Parser  docker, cri
        Mem_Buf_Limit     50MB
        Skip_Long_Lines   On
        Refresh_Interval  10
        Rotate_Wait       30
        Storage.Type      filesystem
        DB                /var/fluent-bit/state/containers.db

    [INPUT]
        Name              systemd
        Tag               host.*
        Systemd_Filter    _SYSTEMD_UNIT=kubelet.service
        Read_From_Tail    On
        Storage.Type      filesystem

    [FILTER]
        Name                kubernetes
        Match               kube.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        Kube_Tag_Prefix     kube.var.log.containers.
        Merge_Log           On
        Keep_Log            Off
        K8S-Logging.Parser  On
        K8S-Logging.Exclude On
        Labels              On
        Annotations         On

    [FILTER]
        Name         lua
        Match        *
        script       /fluent-bit/scripts/filters.lua
        call         enrich_logs

    [FILTER]
        Name         grep
        Match        *
        Exclude      log (?i)(healthz|readyz|livez)

    # Send all logs to OpenObserve
    [OUTPUT]
        Name          http
        Match         *
        Host          openobserve-service.aurora-logs.svc.cluster.local
        Port          5080
        URI           /api/default/logs/_json
        Format        json
        Json_date_key timestamp
        Json_date_format iso8601
        TLS           Off
        Compress      gzip
        Header        Authorization Basic ${OPENOBSERVE_AUTH}
        Retry_Limit   5

    # Also send K8s logs to separate S3 bucket
    [OUTPUT]
        Name              s3
        Match             kube.*
        bucket            company-k8s-logs-poc
        region            [region]
        use_put_object    On
        total_file_size   50M
        upload_timeout    10m
        compression       gzip
        content_type      application/json
        s3_key_format     /k8s-logs/%Y/%m/%d/${TAG}_%{hostname}_%{time:yyyyMMdd-HHmmss}_${UUID}.json.gz
        s3_key_format_tag_delimiters .

  parsers.conf: |
    [PARSER]
        Name   docker
        Format json
        Time_Key time
        Time_Format %Y-%m-%dT%H:%M:%S %z

    [PARSER]
        Name   cri
        Format regex
        Regex  ^(?<time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<message>.*)$
        Time_Key time
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z

    [PARSER]
        Name   mysql_slow
        Format regex
        Regex  ^# Time: (?<time>\d{6} \d{1,2}:\d{1,2}:\d{1,2})|# User@Host: (?<user_host>.*)|# Query_time: (?<query_time>[\d.]+)  Lock_time: (?<lock_time>[\d.]+) Rows_sent: (?<rows_sent>\d+)  Rows_examined: (?<rows_examined>\d+)|(?<query>.*)
        Time_Key time
        Time_Format %y%m%d %H:%M:%S

    [PARSER]
        Name   mysql_error
        Format regex
        Regex  ^(?<time>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z) (?<thread>\d+) \[(?<level>\w+)\] (?<message>.*)
        Time_Key time
        Time_Format %Y-%m-%dT%H:%M:%S.%LZ

  filters.lua: |
    function enrich_logs(tag, timestamp, record)
        -- Add timestamp
        record["processed_timestamp"] = os.time()

        -- Extract Kubernetes metadata if present
        if record["kubernetes"] then
            local k8s = record["kubernetes"]
            record["namespace"] = k8s["namespace_name"]
            record["pod_name"] = k8s["pod_name"]
            record["container_name"] = k8s["container_name"]
            if k8s["labels"] and k8s["labels"]["app"] then
                record["labels_app"] = k8s["labels"]["app"]
            end
        end

        -- Parse JSON logs if possible
        if type(record["log"]) == "string" then
            local status, json_log = pcall(function() 
                return json.decode(record["log"]) 
            end)
            if status and json_log then
                for k, v in pairs(json_log) do
                    record[k] = v
                end
                record["log"] = nil  -- Remove original if parsed
            end
        end

        -- Redact sensitive data
        if record["password"] then
            record["password"] = "REDACTED"
        end

        return 1, timestamp, record
    end
