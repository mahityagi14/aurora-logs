data.aws_subnet.private_1: Reading...
data.aws_dynamodb_table.existing_metadata: Reading...
data.aws_subnet.public_2: Reading...
data.aws_subnet.public_1: Reading...
data.aws_ecs_cluster.aurora_logs: Reading...
data.aws_iam_instance_profile.ecs_instance_profile: Reading...
data.aws_elasticache_replication_group.existing_valkey: Reading...
data.aws_rds_cluster.existing: Reading...
data.aws_security_group.openobserve: Reading...
data.aws_ecr_repository.existing_aurora_log_system: Reading...
data.aws_iam_instance_profile.ecs_instance_profile: Read complete after 1s [id=AIPARBQ7HGSHJSGBBQUB3]
data.aws_ecs_cluster.aurora_logs: Read complete after 1s [id=arn:aws:ecs:us-east-1:072006186126:cluster/gifted-hippopotamus-lcq6xe]
data.aws_ssm_parameter.ecs_optimized_ami: Reading...
data.aws_security_group.openobserve: Read complete after 2s [id=sg-00bacfeb03f17d36c]
data.aws_s3_bucket.existing_aurora_logs: Reading...
data.aws_subnet.private_2: Reading...
data.aws_rds_cluster.existing: Read complete after 2s [id=aurora-mysql-poc-01]
data.aws_iam_role.ecs_instance_role: Reading...
data.aws_subnet.public_1: Read complete after 2s [id=subnet-09a05d3f60260977d]
data.aws_subnet.private_1: Read complete after 2s [id=subnet-065f0d4951fc12ef9]
data.aws_dynamodb_table.existing_jobs: Reading...
data.aws_dynamodb_table.existing_tracking: Reading...
data.aws_iam_role.ecs_instance_role: Read complete after 0s [id=ecs-instance-role]
data.aws_iam_user.jenkins_ecr: Reading...
data.aws_subnet.public_2: Read complete after 2s [id=subnet-02be44306a0c4a66f]
data.aws_security_group.kafka: Reading...
data.aws_subnet.private_2: Read complete after 0s [id=subnet-0726157ced0ebe2cf]
data.aws_security_group.rds: Reading...
data.aws_ecr_repository.existing_aurora_log_system: Read complete after 2s [id=aurora-log-system]
data.aws_vpc.existing: Reading...
data.aws_iam_user.jenkins_ecr: Read complete after 1s [id=AIDARBQ7HGSHGPFDYNEVD]
data.aws_region.current: Reading...
data.aws_region.current: Read complete after 0s [id=us-east-1]
data.aws_caller_identity.current: Reading...
data.aws_security_group.kafka: Read complete after 1s [id=sg-026743f9ff9eb9c4f]
data.aws_ssm_parameter.ecs_optimized_ami: Read complete after 2s [id=/aws/service/ecs/optimized-ami/amazon-linux-2023/arm64/recommended/image_id]
data.aws_security_group.rds: Read complete after 1s [id=sg-0781a0b7315baf1ab]
data.aws_s3_bucket.existing_aurora_logs: Read complete after 1s [id=company-aurora-logs-poc]
data.aws_caller_identity.current: Read complete after 0s [id=072006186126]
data.aws_elasticache_replication_group.existing_valkey: Read complete after 3s [id=aurora-logs-poc-valkey]
data.aws_dynamodb_table.existing_metadata: Read complete after 4s [id=aurora-instance-metadata]
data.aws_dynamodb_table.existing_jobs: Read complete after 3s [id=aurora-log-processing-jobs]
data.aws_dynamodb_table.existing_tracking: Read complete after 3s [id=aurora-log-file-tracking]
data.aws_vpc.existing: Read complete after 2s [id=vpc-0709b8bef0bf79401]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
  ~ update in-place
  - destroy
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # aws_appautoscaling_policy.processor_cpu must be replaced
-/+ resource "aws_appautoscaling_policy" "processor_cpu" {
      ~ alarm_arns         = [
          - "arn:aws:cloudwatch:us-east-1:072006186126:alarm:TargetTracking-service/aurora-logs-poc-ecs-cluster/processor-AlarmHigh-8d770b4d-519e-4a92-8077-c5d8c2caee33",
          - "arn:aws:cloudwatch:us-east-1:072006186126:alarm:TargetTracking-service/aurora-logs-poc-ecs-cluster/processor-AlarmLow-46701972-82b2-4cf3-8392-13c32fbd3278",
        ] -> (known after apply)
      ~ arn                = "arn:aws:autoscaling:us-east-1:072006186126:scalingPolicy:d0b4f7ec-48db-4068-983f-37cb4acf513e:resource/ecs/service/aurora-logs-poc-ecs-cluster/processor:policyName/aurora-logs-poc-processor-cpu-scaling" -> (known after apply)
      ~ id                 = "aurora-logs-poc-processor-cpu-scaling" -> (known after apply)
        name               = "aurora-logs-poc-processor-cpu-scaling"
      ~ resource_id        = "service/aurora-logs-poc-ecs-cluster/processor" -> "service/gifted-hippopotamus-lcq6xe/processor" # forces replacement
        # (4 unchanged attributes hidden)

      ~ target_tracking_scaling_policy_configuration {
          - scale_in_cooldown  = 0 -> null
          - scale_out_cooldown = 0 -> null
            # (2 unchanged attributes hidden)

            # (1 unchanged block hidden)
        }
    }

  # aws_appautoscaling_policy.processor_memory must be replaced
-/+ resource "aws_appautoscaling_policy" "processor_memory" {
      ~ alarm_arns         = [
          - "arn:aws:cloudwatch:us-east-1:072006186126:alarm:TargetTracking-service/aurora-logs-poc-ecs-cluster/processor-AlarmHigh-0361d5f9-752f-45a9-af5e-b6134ffaf248",
          - "arn:aws:cloudwatch:us-east-1:072006186126:alarm:TargetTracking-service/aurora-logs-poc-ecs-cluster/processor-AlarmLow-fb25618a-7a14-4b43-b7f4-a40de8176297",
        ] -> (known after apply)
      ~ arn                = "arn:aws:autoscaling:us-east-1:072006186126:scalingPolicy:d0b4f7ec-48db-4068-983f-37cb4acf513e:resource/ecs/service/aurora-logs-poc-ecs-cluster/processor:policyName/aurora-logs-poc-processor-memory-scaling" -> (known after apply)
      ~ id                 = "aurora-logs-poc-processor-memory-scaling" -> (known after apply)
        name               = "aurora-logs-poc-processor-memory-scaling"
      ~ resource_id        = "service/aurora-logs-poc-ecs-cluster/processor" -> "service/gifted-hippopotamus-lcq6xe/processor" # forces replacement
        # (4 unchanged attributes hidden)

      ~ target_tracking_scaling_policy_configuration {
          - scale_in_cooldown  = 0 -> null
          - scale_out_cooldown = 0 -> null
            # (2 unchanged attributes hidden)

            # (1 unchanged block hidden)
        }
    }

  # aws_appautoscaling_scheduled_action.processor_scale_down[0] must be replaced
-/+ resource "aws_appautoscaling_scheduled_action" "processor_scale_down" {
      ~ arn                = "arn:aws:autoscaling:us-east-1:072006186126:scheduledAction:d0b4f7ec-48db-4068-983f-37cb4acf513e:resource/ecs/service/aurora-logs-poc-ecs-cluster/processor:scheduledActionName/aurora-logs-poc-processor-scale-down" -> (known after apply)
      ~ id                 = "aurora-logs-poc-processor-scale-down-ecs-service/aurora-logs-poc-ecs-cluster/processor" -> (known after apply)
        name               = "aurora-logs-poc-processor-scale-down"
      ~ resource_id        = "service/aurora-logs-poc-ecs-cluster/processor" -> "service/gifted-hippopotamus-lcq6xe/processor" # forces replacement
        # (5 unchanged attributes hidden)

        # (1 unchanged block hidden)
    }

  # aws_appautoscaling_scheduled_action.processor_scale_up[0] must be replaced
-/+ resource "aws_appautoscaling_scheduled_action" "processor_scale_up" {
      ~ arn                = "arn:aws:autoscaling:us-east-1:072006186126:scheduledAction:d0b4f7ec-48db-4068-983f-37cb4acf513e:resource/ecs/service/aurora-logs-poc-ecs-cluster/processor:scheduledActionName/aurora-logs-poc-processor-scale-up" -> (known after apply)
      ~ id                 = "aurora-logs-poc-processor-scale-up-ecs-service/aurora-logs-poc-ecs-cluster/processor" -> (known after apply)
        name               = "aurora-logs-poc-processor-scale-up"
      ~ resource_id        = "service/aurora-logs-poc-ecs-cluster/processor" -> "service/gifted-hippopotamus-lcq6xe/processor" # forces replacement
        # (5 unchanged attributes hidden)

        # (1 unchanged block hidden)
    }

  # aws_appautoscaling_target.processor must be replaced
-/+ resource "aws_appautoscaling_target" "processor" {
      ~ arn                = "arn:aws:application-autoscaling:us-east-1:072006186126:scalable-target/0ec5d0b4f7ec48db4068983f37cb4acf513e" -> (known after apply)
      ~ id                 = "service/aurora-logs-poc-ecs-cluster/processor" -> (known after apply)
      ~ resource_id        = "service/aurora-logs-poc-ecs-cluster/processor" -> "service/gifted-hippopotamus-lcq6xe/processor" # forces replacement
      ~ role_arn           = "arn:aws:iam::072006186126:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService" -> (known after apply)
      - tags               = {} -> null
        # (6 unchanged attributes hidden)

      ~ suspended_state (known after apply)
      - suspended_state {
          - dynamic_scaling_in_suspended  = false -> null
          - dynamic_scaling_out_suspended = false -> null
          - scheduled_scaling_suspended   = false -> null
        }
    }

  # aws_autoscaling_group.ecs_instances will be destroyed
  # (because aws_autoscaling_group.ecs_instances is not in configuration)
  - resource "aws_autoscaling_group" "ecs_instances" {
      - arn                              = "arn:aws:autoscaling:us-east-1:072006186126:autoScalingGroup:d1e47c29-38f0-4d3a-82d2-74e63c87da4b:autoScalingGroupName/aurora-logs-poc-ecs-asg" -> null
      - availability_zones               = [
          - "us-east-1a",
          - "us-east-1b",
        ] -> null
      - capacity_rebalance               = false -> null
      - default_cooldown                 = 300 -> null
      - default_instance_warmup          = 0 -> null
      - desired_capacity                 = 1 -> null
      - force_delete                     = false -> null
      - force_delete_warm_pool           = false -> null
      - health_check_grace_period        = 300 -> null
      - health_check_type                = "EC2" -> null
      - id                               = "aurora-logs-poc-ecs-asg" -> null
      - ignore_failed_scaling_activities = false -> null
      - load_balancers                   = [] -> null
      - max_instance_lifetime            = 0 -> null
      - max_size                         = 3 -> null
      - metrics_granularity              = "1Minute" -> null
      - min_size                         = 1 -> null
      - name                             = "aurora-logs-poc-ecs-asg" -> null
      - predicted_capacity               = 0 -> null
      - protect_from_scale_in            = false -> null
      - region                           = "us-east-1" -> null
      - service_linked_role_arn          = "arn:aws:iam::072006186126:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling" -> null
      - target_group_arns                = [] -> null
      - vpc_zone_identifier              = [
          - "subnet-065f0d4951fc12ef9",
          - "subnet-0726157ced0ebe2cf",
        ] -> null
      - wait_for_capacity_timeout        = "10m" -> null
      - warm_pool_size                   = 0 -> null
        # (5 unchanged attributes hidden)

      - availability_zone_distribution {
          - capacity_distribution_strategy = "balanced-best-effort" -> null
        }

      - capacity_reservation_specification {
          - capacity_reservation_preference = "default" -> null
        }

      - launch_template {
          - id      = "lt-0492498064a73cf8a" -> null
          - name    = "aurora-logs-poc-ecs-20250729190716551900000001" -> null
          - version = "$Latest" -> null
        }

      - tag {
          - key                 = "AmazonECSManaged" -> null
          - propagate_at_launch = true -> null
          - value               = "true" -> null
        }
      - tag {
          - key                 = "CostCenter" -> null
          - propagate_at_launch = true -> null
          - value               = "poc-testing" -> null
        }
      - tag {
          - key                 = "CreatedAt" -> null
          - propagate_at_launch = true -> null
          - value               = "2025-07-29T19:07:09Z" -> null
        }
      - tag {
          - key                 = "Environment" -> null
          - propagate_at_launch = true -> null
          - value               = "poc" -> null
        }
      - tag {
          - key                 = "ManagedBy" -> null
          - propagate_at_launch = true -> null
          - value               = "terraform" -> null
        }
      - tag {
          - key                 = "Name" -> null
          - propagate_at_launch = true -> null
          - value               = "aurora-logs-poc-ecs-instance" -> null
        }
      - tag {
          - key                 = "Project" -> null
          - propagate_at_launch = true -> null
          - value               = "aurora-log-system" -> null
        }
    }

  # aws_cloudwatch_log_group.ecs_logs will be updated in-place
  ~ resource "aws_cloudwatch_log_group" "ecs_logs" {
        id                = "/ecs/aurora-logs-poc"
        name              = "/ecs/aurora-logs-poc"
      ~ tags              = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:57:49Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all          = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:57:49Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
        # (7 unchanged attributes hidden)
    }

  # aws_ecs_capacity_provider.aurora_logs will be destroyed
  # (because aws_ecs_capacity_provider.aurora_logs is not in configuration)
  - resource "aws_ecs_capacity_provider" "aurora_logs" {
      - arn      = "arn:aws:ecs:us-east-1:072006186126:capacity-provider/aurora-logs-poc-ec2" -> null
      - id       = "arn:aws:ecs:us-east-1:072006186126:capacity-provider/aurora-logs-poc-ec2" -> null
      - name     = "aurora-logs-poc-ec2" -> null
      - region   = "us-east-1" -> null
      - tags     = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> null
      - tags_all = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> null

      - auto_scaling_group_provider {
          - auto_scaling_group_arn         = "arn:aws:autoscaling:us-east-1:072006186126:autoScalingGroup:d1e47c29-38f0-4d3a-82d2-74e63c87da4b:autoScalingGroupName/aurora-logs-poc-ecs-asg" -> null
          - managed_draining               = "ENABLED" -> null
          - managed_termination_protection = "DISABLED" -> null

          - managed_scaling {
              - instance_warmup_period    = 0 -> null
              - maximum_scaling_step_size = 1000 -> null
              - minimum_scaling_step_size = 1 -> null
              - status                    = "ENABLED" -> null
              - target_capacity           = 100 -> null
            }
        }
    }

  # aws_ecs_cluster.aurora_logs will be destroyed
  # (because aws_ecs_cluster.aurora_logs is not in configuration)
  - resource "aws_ecs_cluster" "aurora_logs" {
      - arn      = "arn:aws:ecs:us-east-1:072006186126:cluster/aurora-logs-poc-ecs-cluster" -> null
      - id       = "arn:aws:ecs:us-east-1:072006186126:cluster/aurora-logs-poc-ecs-cluster" -> null
      - name     = "aurora-logs-poc-ecs-cluster" -> null
      - region   = "us-east-1" -> null
      - tags     = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Name"        = "aurora-logs-poc-ecs-cluster"
          - "Project"     = "aurora-log-system"
        } -> null
      - tags_all = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Name"        = "aurora-logs-poc-ecs-cluster"
          - "Project"     = "aurora-log-system"
        } -> null

      - setting {
          - name  = "containerInsights" -> null
          - value = "disabled" -> null
        }
    }

  # aws_ecs_cluster_capacity_providers.aurora_logs will be destroyed
  # (because aws_ecs_cluster_capacity_providers.aurora_logs is not in configuration)
  - resource "aws_ecs_cluster_capacity_providers" "aurora_logs" {
      - capacity_providers = [
          - "aurora-logs-poc-ec2",
        ] -> null
      - cluster_name       = "aurora-logs-poc-ecs-cluster" -> null
      - id                 = "aurora-logs-poc-ecs-cluster" -> null
      - region             = "us-east-1" -> null

      - default_capacity_provider_strategy {
          - base              = 1 -> null
          - capacity_provider = "aurora-logs-poc-ec2" -> null
          - weight            = 100 -> null
        }
    }

  # aws_ecs_service.discovery will be updated in-place
  ~ resource "aws_ecs_service" "discovery" {
        id                                 = "arn:aws:ecs:us-east-1:072006186126:service/gifted-hippopotamus-lcq6xe/discovery"
        name                               = "discovery"
      ~ tags                               = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:22:52Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all                           = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:22:52Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ task_definition                    = "arn:aws:ecs:us-east-1:072006186126:task-definition/aurora-logs-poc-discovery:2" -> (known after apply)
        # (16 unchanged attributes hidden)

        # (4 unchanged blocks hidden)
    }

  # aws_ecs_service.kafka will be updated in-place
  ~ resource "aws_ecs_service" "kafka" {
        id                                 = "arn:aws:ecs:us-east-1:072006186126:service/gifted-hippopotamus-lcq6xe/kafka"
        name                               = "kafka"
      ~ tags                               = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:22:52Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all                           = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:22:52Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ task_definition                    = "arn:aws:ecs:us-east-1:072006186126:task-definition/aurora-logs-poc-kafka:2" -> (known after apply)
        # (16 unchanged attributes hidden)

        # (3 unchanged blocks hidden)
    }

  # aws_ecs_service.openobserve will be created
  + resource "aws_ecs_service" "openobserve" {
      + arn                                = (known after apply)
      + availability_zone_rebalancing      = "DISABLED"
      + cluster                            = "arn:aws:ecs:us-east-1:072006186126:cluster/gifted-hippopotamus-lcq6xe"
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 100
      + desired_count                      = 1
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "EC2"
      + name                               = "openobserve"
      + platform_version                   = (known after apply)
      + region                             = "us-east-1"
      + scheduling_strategy                = "REPLICA"
      + tags                               = (known after apply)
      + tags_all                           = (known after apply)
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + load_balancer {
          + container_name   = "openobserve"
          + container_port   = 5080
          + target_group_arn = "arn:aws:elasticloadbalancing:us-east-1:072006186126:targetgroup/aurora-logs-poc-openobserve-tg/690e1a4caf597b22"
            # (1 unchanged attribute hidden)
        }

      + placement_constraints {
          + type       = "distinctInstance"
            # (1 unchanged attribute hidden)
        }
    }

  # aws_ecs_service.processor will be updated in-place
  ~ resource "aws_ecs_service" "processor" {
        id                                 = "arn:aws:ecs:us-east-1:072006186126:service/gifted-hippopotamus-lcq6xe/processor"
        name                               = "processor"
      ~ tags                               = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:22:52Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all                           = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:22:52Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ task_definition                    = "arn:aws:ecs:us-east-1:072006186126:task-definition/aurora-logs-poc-processor:2" -> (known after apply)
        # (16 unchanged attributes hidden)

        # (3 unchanged blocks hidden)
    }

  # aws_ecs_task_definition.discovery must be replaced
-/+ resource "aws_ecs_task_definition" "discovery" {
      ~ arn                      = "arn:aws:ecs:us-east-1:072006186126:task-definition/aurora-logs-poc-discovery:2" -> (known after apply)
      ~ arn_without_revision     = "arn:aws:ecs:us-east-1:072006186126:task-definition/aurora-logs-poc-discovery" -> (known after apply)
      ~ container_definitions    = jsonencode(
          ~ [
              ~ {
                  ~ logConfiguration = {
                      ~ options   = {
                          + awslogs-create-group  = "true"
                          + max-buffer-size       = "25m"
                            # (3 unchanged attributes hidden)
                        }
                        # (1 unchanged attribute hidden)
                    }
                  - mountPoints      = []
                    name             = "discovery"
                  - portMappings     = []
                  - systemControls   = []
                  - volumesFrom      = []
                    # (5 unchanged attributes hidden)
                },
            ] # forces replacement
        )
      + cpu                      = "2048" # forces replacement
      ~ enable_fault_injection   = false -> (known after apply)
      ~ execution_role_arn       = "arn:aws:iam::072006186126:role/ecsTaskExecutionRole" -> "arn:aws:iam::072006186126:role/aurora-ecs-execution-role" # forces replacement
      ~ id                       = "aurora-logs-poc-discovery" -> (known after apply)
      + memory                   = "4096" # forces replacement
      ~ revision                 = 2 -> (known after apply)
      ~ tags                     = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:22:52Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all                 = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:22:52Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ task_role_arn            = "arn:aws:iam::072006186126:role/aurora-logs-poc-ecs-task-role" -> "arn:aws:iam::072006186126:role/aurora-ecs-task-role" # forces replacement
        # (8 unchanged attributes hidden)
    }

  # aws_ecs_task_definition.kafka must be replaced
-/+ resource "aws_ecs_task_definition" "kafka" {
      ~ arn                      = "arn:aws:ecs:us-east-1:072006186126:task-definition/aurora-logs-poc-kafka:2" -> (known after apply)
      ~ arn_without_revision     = "arn:aws:ecs:us-east-1:072006186126:task-definition/aurora-logs-poc-kafka" -> (known after apply)
      ~ container_definitions    = jsonencode(
          ~ [
              ~ {
                  ~ environment      = [
                      ~ {
                          ~ name  = "KAFKA_ADVERTISED_LISTENERS" -> "KAFKA_CFG_ADVERTISED_LISTENERS"
                            # (1 unchanged attribute hidden)
                        },
                      ~ {
                          ~ name  = "KAFKA_BROKER_ID" -> "KAFKA_CFG_CONTROLLER_LISTENER_NAMES"
                          ~ value = "1" -> "CONTROLLER"
                        },
                      ~ {
                          ~ name  = "KAFKA_LISTENERS" -> "KAFKA_CFG_CONTROLLER_QUORUM_VOTERS"
                          ~ value = "PLAINTEXT://0.0.0.0:9092" -> "1@kafka-service:9093"
                        },
                      ~ {
                          ~ name  = "KAFKA_LOG_DIRS" -> "KAFKA_CFG_INTER_BROKER_LISTENER_NAME"
                          ~ value = "/kafka/kafka-logs" -> "PLAINTEXT"
                        },
                      ~ {
                          ~ name  = "KAFKA_LOG_RETENTION_BYTES" -> "KAFKA_CFG_LISTENERS"
                          ~ value = "1073741824" -> "PLAINTEXT://:9092,CONTROLLER://:9093"
                        },
                      ~ {
                          ~ name  = "KAFKA_LOG_RETENTION_HOURS" -> "KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP"
                          ~ value = "24" -> "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
                        },
                      ~ {
                          ~ name  = "KAFKA_ZOOKEEPER_CONNECT" -> "KAFKA_CFG_LOG_DIRS"
                          ~ value = "localhost:2181" -> "/bitnami/kafka/data"
                        },
                      + {
                          + name  = "KAFKA_CFG_METADATA_LOG_DIR"
                          + value = "/bitnami/kafka/metadata"
                        },
                      + {
                          + name  = "KAFKA_CFG_NODE_ID"
                          + value = "1"
                        },
                      + {
                          + name  = "KAFKA_CFG_PROCESS_ROLES"
                          + value = "broker,controller"
                        },
                      + {
                          + name  = "KAFKA_ENABLE_KRAFT"
                          + value = "yes"
                        },
                      + {
                          + name  = "KAFKA_HEAP_OPTS"
                          + value = "-Xmx3G -Xms3G"
                        },
                      + {
                          + name  = "KAFKA_KRAFT_CLUSTER_ID"
                          + value = "aurora-logs-kafka-cluster"
                        },
                    ]
                  ~ logConfiguration = {
                      ~ options   = {
                          + awslogs-create-group  = "true"
                          + max-buffer-size       = "25m"
                            # (3 unchanged attributes hidden)
                        }
                        # (1 unchanged attribute hidden)
                    }
                  ~ mountPoints      = [
                      ~ {
                          ~ containerPath = "/kafka" -> "/bitnami/kafka/data"
                            # (1 unchanged attribute hidden)
                        },
                    ]
                    name             = "kafka"
                  ~ portMappings     = [
                        {
                            containerPort = 9092
                            hostPort      = 9092
                            protocol      = "tcp"
                        },
                      + {
                          + containerPort = 9093
                          + hostPort      = 9093
                          + protocol      = "tcp"
                        },
                    ]
                  - systemControls   = []
                  - volumesFrom      = []
                    # (4 unchanged attributes hidden)
                },
            ] # forces replacement
        )
      + cpu                      = "2048" # forces replacement
      ~ enable_fault_injection   = false -> (known after apply)
      ~ execution_role_arn       = "arn:aws:iam::072006186126:role/ecsTaskExecutionRole" -> "arn:aws:iam::072006186126:role/aurora-ecs-execution-role" # forces replacement
      ~ id                       = "aurora-logs-poc-kafka" -> (known after apply)
      + memory                   = "4096" # forces replacement
      ~ revision                 = 2 -> (known after apply)
      ~ tags                     = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:22:52Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all                 = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:22:52Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ task_role_arn            = "arn:aws:iam::072006186126:role/aurora-logs-poc-ecs-task-role" -> "arn:aws:iam::072006186126:role/aurora-ecs-task-role" # forces replacement
        # (8 unchanged attributes hidden)

      - volume {
          - configure_at_launch = false -> null
          - host_path           = "/mnt/kafka-data" -> null
          - name                = "kafka-data" -> null
        }
      + volume {
          + configure_at_launch = (known after apply)
          + host_path           = "/mnt/kafka-data"
          + name                = "kafka-data"
        }
    }

  # aws_ecs_task_definition.openobserve must be replaced
-/+ resource "aws_ecs_task_definition" "openobserve" {
      ~ arn                      = "arn:aws:ecs:us-east-1:072006186126:task-definition/aurora-logs-poc-openobserve:2" -> (known after apply)
      ~ arn_without_revision     = "arn:aws:ecs:us-east-1:072006186126:task-definition/aurora-logs-poc-openobserve" -> (known after apply)
      ~ container_definitions    = jsonencode(
          ~ [
              ~ {
                  ~ logConfiguration = {
                      ~ options   = {
                          + awslogs-create-group  = "true"
                          + max-buffer-size       = "25m"
                            # (3 unchanged attributes hidden)
                        }
                        # (1 unchanged attribute hidden)
                    }
                    name             = "openobserve"
                  - systemControls   = []
                  - volumesFrom      = []
                    # (8 unchanged attributes hidden)
                },
            ] # forces replacement
        )
      + cpu                      = "2048" # forces replacement
      ~ enable_fault_injection   = false -> (known after apply)
      ~ execution_role_arn       = "arn:aws:iam::072006186126:role/ecsTaskExecutionRole" -> "arn:aws:iam::072006186126:role/aurora-ecs-execution-role" # forces replacement
      ~ id                       = "aurora-logs-poc-openobserve" -> (known after apply)
      + memory                   = "4096" # forces replacement
      ~ revision                 = 2 -> (known after apply)
      ~ tags                     = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:57:49Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all                 = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:57:49Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ task_role_arn            = "arn:aws:iam::072006186126:role/aurora-logs-poc-ecs-task-role" -> "arn:aws:iam::072006186126:role/aurora-ecs-task-role" # forces replacement
        # (8 unchanged attributes hidden)

      - volume {
          - configure_at_launch = false -> null
          - host_path           = "/mnt/openobserve-data" -> null
          - name                = "openobserve-data" -> null
        }
      + volume {
          + configure_at_launch = (known after apply)
          + host_path           = "/mnt/openobserve-data"
          + name                = "openobserve-data"
        }
    }

  # aws_ecs_task_definition.processor must be replaced
-/+ resource "aws_ecs_task_definition" "processor" {
      ~ arn                      = "arn:aws:ecs:us-east-1:072006186126:task-definition/aurora-logs-poc-processor:2" -> (known after apply)
      ~ arn_without_revision     = "arn:aws:ecs:us-east-1:072006186126:task-definition/aurora-logs-poc-processor" -> (known after apply)
      ~ container_definitions    = jsonencode(
          ~ [
              ~ {
                  ~ logConfiguration = {
                      ~ options   = {
                          + awslogs-create-group  = "true"
                          + max-buffer-size       = "25m"
                            # (3 unchanged attributes hidden)
                        }
                        # (1 unchanged attribute hidden)
                    }
                  - mountPoints      = []
                    name             = "processor"
                  - portMappings     = []
                  - systemControls   = []
                  - volumesFrom      = []
                    # (6 unchanged attributes hidden)
                },
            ] # forces replacement
        )
      + cpu                      = "2048" # forces replacement
      ~ enable_fault_injection   = false -> (known after apply)
      ~ execution_role_arn       = "arn:aws:iam::072006186126:role/ecsTaskExecutionRole" -> "arn:aws:iam::072006186126:role/aurora-ecs-execution-role" # forces replacement
      ~ id                       = "aurora-logs-poc-processor" -> (known after apply)
      + memory                   = "4096" # forces replacement
      ~ revision                 = 2 -> (known after apply)
      ~ tags                     = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:22:52Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all                 = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:22:52Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ task_role_arn            = "arn:aws:iam::072006186126:role/aurora-logs-poc-ecs-task-role" -> "arn:aws:iam::072006186126:role/aurora-ecs-task-role" # forces replacement
        # (8 unchanged attributes hidden)
    }

  # aws_iam_role.ecs_task_execution will be updated in-place
  ~ resource "aws_iam_role" "ecs_task_execution" {
        id                    = "aurora-ecs-execution-role"
        name                  = "aurora-ecs-execution-role"
      ~ tags                  = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-31T16:28:23Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all              = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-31T16:28:23Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
        # (11 unchanged attributes hidden)
    }

  # aws_iam_role.ecs_task_role will be updated in-place
  ~ resource "aws_iam_role" "ecs_task_role" {
        id                    = "aurora-ecs-task-role"
        name                  = "aurora-ecs-task-role"
      ~ tags                  = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-31T16:28:23Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all              = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-31T16:28:23Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
        # (11 unchanged attributes hidden)
    }

  # aws_iam_role_policy.ecs_task_execution_secrets will be destroyed
  # (because aws_iam_role_policy.ecs_task_execution_secrets is not in configuration)
  - resource "aws_iam_role_policy" "ecs_task_execution_secrets" {
      - id          = "ecsTaskExecutionRole:ecs-task-execution-secrets" -> null
      - name        = "ecs-task-execution-secrets" -> null
      - policy      = jsonencode(
            {
              - Statement = [
                  - {
                      - Action   = [
                          - "secretsmanager:GetSecretValue",
                        ]
                      - Effect   = "Allow"
                      - Resource = "*"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - role        = "ecsTaskExecutionRole" -> null
        # (1 unchanged attribute hidden)
    }

  # aws_iam_role_policy.ecs_task_policy will be destroyed
  # (because aws_iam_role_policy.ecs_task_policy is not in configuration)
  - resource "aws_iam_role_policy" "ecs_task_policy" {
      - id          = "aurora-logs-poc-ecs-task-role:aurora-logs-poc-ecs-task-policy" -> null
      - name        = "aurora-logs-poc-ecs-task-policy" -> null
      - policy      = jsonencode(
            {
              - Statement = [
                  - {
                      - Action   = [
                          - "s3:GetObject",
                          - "s3:ListBucket",
                          - "s3:PutObject",
                          - "s3:DeleteObject",
                        ]
                      - Effect   = "Allow"
                      - Resource = [
                          - "arn:aws:s3:::company-aurora-logs-poc",
                          - "arn:aws:s3:::company-aurora-logs-poc/*",
                          - "arn:aws:s3:::aurora-k8s-logs-072006186126",
                          - "arn:aws:s3:::aurora-k8s-logs-072006186126/*",
                        ]
                    },
                  - {
                      - Action   = [
                          - "dynamodb:GetItem",
                          - "dynamodb:PutItem",
                          - "dynamodb:UpdateItem",
                          - "dynamodb:Query",
                          - "dynamodb:Scan",
                          - "dynamodb:BatchWriteItem",
                        ]
                      - Effect   = "Allow"
                      - Resource = [
                          - "arn:aws:dynamodb:us-east-1:072006186126:table/aurora-instance-metadata",
                          - "arn:aws:dynamodb:us-east-1:072006186126:table/aurora-log-file-tracking",
                          - "arn:aws:dynamodb:us-east-1:072006186126:table/aurora-log-processing-jobs",
                        ]
                    },
                  - {
                      - Action   = [
                          - "rds:DescribeDBClusters",
                          - "rds:DescribeDBLogFiles",
                          - "rds:DownloadDBLogFilePortion",
                        ]
                      - Effect   = "Allow"
                      - Resource = "*"
                    },
                  - {
                      - Action   = [
                          - "logs:CreateLogGroup",
                          - "logs:CreateLogStream",
                          - "logs:PutLogEvents",
                        ]
                      - Effect   = "Allow"
                      - Resource = "*"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - role        = "aurora-logs-poc-ecs-task-role" -> null
        # (1 unchanged attribute hidden)
    }

  # aws_launch_template.ecs_instances will be updated in-place
  ~ resource "aws_launch_template" "ecs_instances" {
        id                                   = "lt-0492498064a73cf8a"
      ~ instance_type                        = "t4g.small" -> "t4g.medium"
      ~ latest_version                       = 1 -> (known after apply)
        name                                 = "aurora-logs-poc-ecs-20250729190716551900000001"
      ~ tags                                 = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all                             = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ user_data                            = "IyEvYmluL2Jhc2gKZWNobyBFQ1NfQ0xVU1RFUj1hdXJvcmEtbG9ncy1wb2MtZWNzLWNsdXN0ZXIgPj4gL2V0Yy9lY3MvZWNzLmNvbmZpZzs=" -> "IyEvYmluL2Jhc2gKZWNobyBFQ1NfQ0xVU1RFUj1naWZ0ZWQtaGlwcG9wb3RhbXVzLWxjcTZ4ZSA+PiAvZXRjL2Vjcy9lY3MuY29uZmlnOw=="
        # (14 unchanged attributes hidden)

      ~ tag_specifications {
          ~ tags          = {
              - "CostCenter"  = "poc-testing"
              - "CreatedAt"   = "2025-07-29T19:07:09Z"
              - "Environment" = "poc"
              - "ManagedBy"   = "terraform"
              - "Name"        = "aurora-logs-poc-ecs-instance"
              - "Project"     = "aurora-log-system"
              - "Type"        = "ecs-container-instance"
            } -> (known after apply)
            # (1 unchanged attribute hidden)
        }

        # (2 unchanged blocks hidden)
    }

  # aws_lb.openobserve will be created
  + resource "aws_lb" "openobserve" {
      + arn                                                          = (known after apply)
      + arn_suffix                                                   = (known after apply)
      + client_keep_alive                                            = 3600
      + desync_mitigation_mode                                       = "defensive"
      + dns_name                                                     = (known after apply)
      + drop_invalid_header_fields                                   = false
      + enable_deletion_protection                                   = false
      + enable_http2                                                 = true
      + enable_tls_version_and_cipher_suite_headers                  = false
      + enable_waf_fail_open                                         = false
      + enable_xff_client_port                                       = false
      + enable_zonal_shift                                           = false
      + enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      + id                                                           = (known after apply)
      + idle_timeout                                                 = 60
      + internal                                                     = false
      + ip_address_type                                              = (known after apply)
      + load_balancer_type                                           = "application"
      + name                                                         = "aurora-logs-poc-alb"
      + name_prefix                                                  = (known after apply)
      + preserve_host_header                                         = false
      + region                                                       = "us-east-1"
      + security_groups                                              = [
          + "sg-0df4c3eb67e0739fb",
        ]
      + subnets                                                      = [
          + "subnet-02be44306a0c4a66f",
          + "subnet-09a05d3f60260977d",
        ]
      + tags                                                         = (known after apply)
      + tags_all                                                     = (known after apply)
      + vpc_id                                                       = (known after apply)
      + xff_header_processing_mode                                   = "append"
      + zone_id                                                      = (known after apply)

      + subnet_mapping (known after apply)
    }

  # aws_lb_listener.openobserve will be created
  + resource "aws_lb_listener" "openobserve" {
      + arn                                                                   = (known after apply)
      + id                                                                    = (known after apply)
      + load_balancer_arn                                                     = (known after apply)
      + port                                                                  = 80
      + protocol                                                              = "HTTP"
      + region                                                                = "us-east-1"
      + routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      + routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      + routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      + routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      + routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      + routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      + routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      + routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      + routing_http_response_access_control_max_age_header_value             = (known after apply)
      + routing_http_response_content_security_policy_header_value            = (known after apply)
      + routing_http_response_server_enabled                                  = (known after apply)
      + routing_http_response_strict_transport_security_header_value          = (known after apply)
      + routing_http_response_x_content_type_options_header_value             = (known after apply)
      + routing_http_response_x_frame_options_header_value                    = (known after apply)
      + ssl_policy                                                            = (known after apply)
      + tags_all                                                              = {
          + "CostCenter"  = "poc-testing"
          + "Environment" = "poc"
          + "ManagedBy"   = "terraform"
          + "Project"     = "aurora-log-system"
        }
      + tcp_idle_timeout_seconds                                              = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = "arn:aws:elasticloadbalancing:us-east-1:072006186126:targetgroup/aurora-logs-poc-openobserve-tg/690e1a4caf597b22"
          + type             = "forward"
        }

      + mutual_authentication (known after apply)
    }

  # aws_lb_target_group.openobserve will be updated in-place
  ~ resource "aws_lb_target_group" "openobserve" {
        id                                 = "arn:aws:elasticloadbalancing:us-east-1:072006186126:targetgroup/aurora-logs-poc-openobserve-tg/690e1a4caf597b22"
        name                               = "aurora-logs-poc-openobserve-tg"
      ~ tags                               = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:57:49Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Name"        = "aurora-logs-poc-openobserve-tg"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all                           = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:57:49Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Name"        = "aurora-logs-poc-openobserve-tg"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
        # (18 unchanged attributes hidden)

        # (5 unchanged blocks hidden)
    }

  # aws_secretsmanager_secret.openobserve_credentials will be updated in-place
  ~ resource "aws_secretsmanager_secret" "openobserve_credentials" {
        id                             = "arn:aws:secretsmanager:us-east-1:072006186126:secret:aurora-logs-poc-openobserve-credentials-tp627U"
        name                           = "aurora-logs-poc-openobserve-credentials"
      ~ tags                           = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:57:49Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all                       = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:57:49Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
        # (8 unchanged attributes hidden)
    }

  # aws_security_group.alb will be updated in-place
  ~ resource "aws_security_group" "alb" {
        id                     = "sg-0df4c3eb67e0739fb"
        name                   = "aurora-logs-poc-alb-sg"
      ~ tags                   = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:57:49Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Name"        = "aurora-logs-poc-alb-sg"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all               = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:57:49Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Name"        = "aurora-logs-poc-alb-sg"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
        # (9 unchanged attributes hidden)
    }

  # aws_security_group.aurora_mysql will be created
  + resource "aws_security_group" "aurora_mysql" {
      + arn                    = (known after apply)
      + description            = "Security group for Aurora MySQL cluster"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Direct access for testing"
              + from_port        = 3306
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 3306
            },
          + {
              + cidr_blocks      = []
              + description      = "Access from ECS"
              + from_port        = 3306
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = [
                  + "sg-003ed0961d87e82ff",
                ]
              + self             = false
              + to_port          = 3306
            },
        ]
      + name                   = "aurora-mysql-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "us-east-1"
      + revoke_rules_on_delete = false
      + tags                   = (known after apply)
      + tags_all               = (known after apply)
      + vpc_id                 = "vpc-0709b8bef0bf79401"
    }

  # aws_security_group.ecs_instances will be updated in-place
  ~ resource "aws_security_group" "ecs_instances" {
        id                     = "sg-003ed0961d87e82ff"
        name                   = "aurora-logs-poc-ecs-instances-sg"
      ~ tags                   = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Name"        = "aurora-logs-poc-ecs-instances-sg"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all               = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Name"        = "aurora-logs-poc-ecs-instances-sg"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
        # (9 unchanged attributes hidden)
    }

  # aws_security_group.ecs_tasks will be updated in-place
  ~ resource "aws_security_group" "ecs_tasks" {
        id                     = "sg-08071d66a83d51b62"
        name                   = "aurora-logs-poc-ecs-tasks-sg"
      ~ tags                   = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Name"        = "aurora-logs-poc-ecs-tasks-sg"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all               = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Name"        = "aurora-logs-poc-ecs-tasks-sg"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
        # (9 unchanged attributes hidden)
    }

  # aws_security_group.kafka_brokers will be created
  + resource "aws_security_group" "kafka_brokers" {
      + arn                    = (known after apply)
      + description            = "Security group for Kafka brokers on ECS"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = "Inter-broker communication"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = true
              + to_port          = 0
            },
          + {
              + cidr_blocks      = []
              + description      = "KRaft controller port"
              + from_port        = 9093
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = true
              + to_port          = 9093
            },
          + {
              + cidr_blocks      = []
              + description      = "Kafka client connections"
              + from_port        = 9092
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = [
                  + "sg-003ed0961d87e82ff",
                ]
              + self             = false
              + to_port          = 9092
            },
        ]
      + name                   = "kafka-brokers-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "us-east-1"
      + revoke_rules_on_delete = false
      + tags                   = (known after apply)
      + tags_all               = (known after apply)
      + vpc_id                 = "vpc-0709b8bef0bf79401"
    }

  # aws_security_group.openobserve will be created
  + resource "aws_security_group" "openobserve" {
      + arn                    = (known after apply)
      + description            = "Security group for OpenObserve on ECS"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = "HTTP from ALB"
              + from_port        = 5080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = [
                  + "sg-0df4c3eb67e0739fb",
                ]
              + self             = false
              + to_port          = 5080
            },
          + {
              + cidr_blocks      = []
              + description      = "Health checks"
              + from_port        = 5080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = [
                  + "sg-003ed0961d87e82ff",
                ]
              + self             = false
              + to_port          = 5080
            },
        ]
      + name                   = "openobserve-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "us-east-1"
      + revoke_rules_on_delete = false
      + tags                   = (known after apply)
      + tags_all               = (known after apply)
      + vpc_id                 = "vpc-0709b8bef0bf79401"
    }

  # aws_security_group.valkey_cluster will be created
  + resource "aws_security_group" "valkey_cluster" {
      + arn                    = (known after apply)
      + description            = "Security group for Valkey cache cluster"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = "Redis protocol access"
              + from_port        = 6379
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = [
                  + "sg-003ed0961d87e82ff",
                ]
              + self             = false
              + to_port          = 6379
            },
        ]
      + name                   = "valkey-cluster-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "us-east-1"
      + revoke_rules_on_delete = false
      + tags                   = (known after apply)
      + tags_all               = (known after apply)
      + vpc_id                 = "vpc-0709b8bef0bf79401"
    }

  # aws_service_discovery_private_dns_namespace.aurora_logs will be updated in-place
  ~ resource "aws_service_discovery_private_dns_namespace" "aurora_logs" {
        id          = "ns-vujy37u2voluocmq"
        name        = "aurora-logs.local"
      ~ tags        = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:22:52Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all    = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-30T18:22:52Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
        # (5 unchanged attributes hidden)
    }

  # aws_service_discovery_service.discovery must be replaced
-/+ resource "aws_service_discovery_service" "discovery" {
      ~ arn           = "arn:aws:servicediscovery:us-east-1:072006186126:service/srv-gldeh66c7ibx3zex" -> (known after apply)
      ~ id            = "srv-gldeh66c7ibx3zex" -> (known after apply)
        name          = "discovery"
      ~ namespace_id  = "ns-vujy37u2voluocmq" -> (known after apply)
      ~ tags          = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all      = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ type          = "DNS_HTTP" -> (known after apply)
        # (3 unchanged attributes hidden)

      + health_check_custom_config {} # forces replacement

        # (1 unchanged block hidden)
    }

  # aws_service_discovery_service.kafka must be replaced
-/+ resource "aws_service_discovery_service" "kafka" {
      ~ arn           = "arn:aws:servicediscovery:us-east-1:072006186126:service/srv-u5ikw5ernk4nvq6b" -> (known after apply)
      ~ id            = "srv-u5ikw5ernk4nvq6b" -> (known after apply)
        name          = "kafka"
      ~ namespace_id  = "ns-vujy37u2voluocmq" -> (known after apply)
      ~ tags          = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all      = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ type          = "DNS_HTTP" -> (known after apply)
        # (3 unchanged attributes hidden)

      + health_check_custom_config {} # forces replacement

        # (1 unchanged block hidden)
    }

  # aws_service_discovery_service.openobserve must be replaced
-/+ resource "aws_service_discovery_service" "openobserve" {
      ~ arn           = "arn:aws:servicediscovery:us-east-1:072006186126:service/srv-6oyrplwbowffgboe" -> (known after apply)
      ~ id            = "srv-6oyrplwbowffgboe" -> (known after apply)
        name          = "openobserve"
      ~ namespace_id  = "ns-vujy37u2voluocmq" -> (known after apply)
      ~ tags          = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all      = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ type          = "DNS_HTTP" -> (known after apply)
        # (3 unchanged attributes hidden)

      + health_check_custom_config {} # forces replacement

        # (1 unchanged block hidden)
    }

  # aws_service_discovery_service.processor must be replaced
-/+ resource "aws_service_discovery_service" "processor" {
      ~ arn           = "arn:aws:servicediscovery:us-east-1:072006186126:service/srv-nxlbgsn5bx74a2qi" -> (known after apply)
      ~ id            = "srv-nxlbgsn5bx74a2qi" -> (known after apply)
        name          = "processor"
      ~ namespace_id  = "ns-vujy37u2voluocmq" -> (known after apply)
      ~ tags          = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ tags_all      = {
          - "CostCenter"  = "poc-testing"
          - "CreatedAt"   = "2025-07-29T19:07:09Z"
          - "Environment" = "poc"
          - "ManagedBy"   = "terraform"
          - "Project"     = "aurora-log-system"
        } -> (known after apply)
      ~ type          = "DNS_HTTP" -> (known after apply)
        # (3 unchanged attributes hidden)

      + health_check_custom_config {} # forces replacement

        # (1 unchanged block hidden)
    }

Plan: 20 to add, 13 to change, 19 to destroy.

Changes to Outputs:
  ~ alb_dns_name               = "ALB only created in production" -> (known after apply)
  - ecs_asg_name               = "aurora-logs-poc-ecs-asg" -> null
  - ecs_capacity_provider_name = "aurora-logs-poc-ec2" -> null
  ~ openobserve_access         = "Use ECS Exec or port forwarding to access OpenObserve" -> (known after apply)

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
